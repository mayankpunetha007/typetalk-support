package com.nulab.initialutils;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.nulab.data.pojo.inner.Account;
import com.nulab.data.pojo.inner.Group;
import com.nulab.data.pojo.inner.Space;
import com.nulab.data.typetalk.TypeTalkService;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * Class to generate all useful information for the organisation identified by given clientkey authkey pair
 */
public class UtilForFindingIds {

    private static ObjectMapper objectMapper = new ObjectMapper();

    private static TypeTalkService typeTalkService;

    private static String typettalkClientId = "";

    private static String typettalkClientSecret = "";

    public static void main(String[] args) throws Exception {
        if(args.length<2){
            throw new Exception("Please make sure you supply both keys");
        }
        typeTalkService = new TypeTalkService(args[0], args[1]);
        typeTalkService.initToken();
        run();
    }

    private static String removeLastComma(String s) {
        return s.length() > 0 ? s.substring(0, s.length() - 1) : "";
    }

    private static void run() throws IOException {
        File f = new File("application.properties");
        List<Space> organisations = typeTalkService.getOrganisations();
        BufferedWriter br = new BufferedWriter(new FileWriter(f));
        for (Space space : organisations) {
            String organisationKey = space.getKey();
            String organisationName = space.getName();
            List<Group> groups = typeTalkService.getOrganisationGroups(organisationKey);
            List<Account> accounts = typeTalkService.getOrganisationMembers(organisationKey);
            String groupNames = "";
            String groupKeys = "";
            String accountNames = "";
            String accountFullName = "";
            String accountKeys = "";
            for (Group g : groups) {
                groupNames += g.getName() + ",";
                groupKeys += g.getKey() + ",";
            }
            for (Account a : accounts) {
                accountNames += a.getName() + ",";
                accountFullName += a.getFullName() + ",";
                accountKeys += a.getId() + ",";
            }
            br.write("# Generated By UtilForFindingIds.java" + System.lineSeparator());
            br.write("# Use and generate for even your Application by entering you client key and secret key" + System.lineSeparator());
            br.write("# Here is a lis of organisation followed by key, groups, accounts" + System.lineSeparator());
            br.write("# Organisation name" + System.lineSeparator());
            br.write("# TYPETALK_ORGANISATION_NAME = " + organisationName + System.lineSeparator());
            br.write("# Organisation Key" + System.lineSeparator());
            br.write("TYPETALK_ORGANISATION = " + organisationKey + System.lineSeparator());
            br.write("# Organisation Group Names" + System.lineSeparator());
            br.write("TYPETALK_ORGANISATION = " + organisationKey + System.lineSeparator());
            br.write("# TYPETALK_SUPPORT_GROUP_NAMES = " + removeLastComma(groupNames) + System.lineSeparator());
            br.write("TYPETALK_SUPPORT_GROUP_ID = " + removeLastComma(groupKeys) + System.lineSeparator());
            br.write("# TYPETALK_SUPPORT_ACCOUNT_NAMES = " + removeLastComma(accountNames) + System.lineSeparator());
            br.write("TYPETALK_SUPPORT_ACCOUNT_ID = " + removeLastComma(accountKeys) + System.lineSeparator());
            br.close();
        }
    }

    public static ObjectMapper getObjectMapper() {
        return objectMapper;
    }

    public static void setObjectMapper(ObjectMapper objectMapper) {
        UtilForFindingIds.objectMapper = objectMapper;
    }

    public static TypeTalkService getTypeTalkService() {
        return typeTalkService;
    }

    public static void setTypeTalkService(TypeTalkService typeTalkService) {
        UtilForFindingIds.typeTalkService = typeTalkService;
    }

}
